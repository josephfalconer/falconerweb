// ====================================
// Mixins
// ===================================

// BEM selectors
@mixin e($element) {
	&__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Media queries
@mixin mq($point, $rule: 'min') {
	$keys: map-keys($breakpoints);
	$valid-point: false;
	$valid-rule: false;

	// validate
	@each $key in $keys {
		@if (str-index($key, $point)) {
			$valid-point: true;
		}
		@if (str-index($key, $rule)) or $rule == 'only' or $rule == 'except' {
			$valid-rule: true;
		}
	}

	// feed errors back
	@if $point == 'desktop' and $rule == 'only' {
		@error "You supplied 'desktop' and 'only' - there is no 'desktop-max' breakpoint."
	}

	@if not $valid-rule or not $valid-point {
		$breakpoint-key: #{$point}-#{$rule};
		@error "#{$breakpoint-key} wasn't found. Please check $breakpoints map in settings.scss."
	}

	// the media query
	@if $rule == 'only' {
		@media (min-width: break(#{$point}-min)) and (max-width: break(#{$point}-max)) {
			@content
		}
	} @else if $rule == 'except' {
		@media (max-width: break(#{$point}-min) - 1) {
			@content
		}
		@media (min-width: break(#{$point}-max) + 1) {
			@content
		}
	} @else {
		@media (#{$rule}-width: break(#{$point}-#{$rule})) {
			@content
		}
	}
}

// sizing
@mixin dimensions($w, $h) {
	width: $w;
	height: $h;
} // TODO - replace with sides all through Sass

@mixin sides($w, $h) {
	width: $w;
	height: $h;
}

@mixin square($val) {
	width: $val;
	height: $val;
}

// fontsizes
@mixin fontsizes($font-sizes) {
	@each $break, $size in $font-sizes {
		@include mq(#{$break}) {
			line-height: $size * 1.4;
			font-size: #{$size};
		}
	}
}











// TRANSITIONS AND TRANSFORMS

@mixin transition($tn: null, $timings: null, $tn-norm: null, $tn-norm-sd: null) {
	@if $tn {
		-webkit-transition: -webkit-#{$tn} #{$timings}, $tn-norm;
		-moz-transition: -moz-#{$tn} #{$timings}, $tn-norm;
		-ms-transition: -ms-#{$tn} #{$timings}, $tn-norm;
		-o-transition: -o-#{$tn} #{$timings}, $tn-norm;
		transition: #{$tn} #{$timings}, $tn-norm;
	} @else if $tn-norm-sd {
		-webkit-transition: $tn-norm, $tn-norm-sd;
		-moz-transition: $tn-norm, $tn-norm-sd;
		-ms-transition: $tn-norm, $tn-norm-sd;
		-o-transition: $tn-norm, $tn-norm-sd;
		transition: $tn-norm, $tn-norm-sd;
	} @else {
		-webkit-transition: $tn-norm;
		-moz-transition: $tn-norm;
		-ms-transition: $tn-norm;
		-o-transition: $tn-norm;
		transition: $tn-norm;
	}
}

@mixin transform($trm, $trm-scnd: null) {
	-webkit-transform: $trm $trm-scnd;
	-moz-transform: $trm $trm-scnd;
	-o-transform: $trm $trm-scnd;
	-ms-transform: $trm $trm-scnd;
	transform: $trm $trm-scnd;
}

@mixin tn-delay($dy) {
	-webkit-transition-delay: $dy;
	-moz-transition-delay: $dy;
	-o-transition-delay: $dy;
	transition-delay: $dy;
}

@mixin tform-origin($o) {
	-webkit-transform-origin: $o;
	-moz-transform-origin: $o;
	-o-transform-origin: $o;
	transform-origin: $o;
}


// KEYFRAME ANIMATIONS

@mixin keyframes-pfx($nm, $pnts, $tfrms) {
  @-webkit-keyframes #{$nm} {
    @each $p in $pnts {
      $i: index($pnts, $p);
      #{$p} { -webkit-transform: nth($tfrms, $i); }
    }
    @content;
  }
  @-moz-keyframes #{$nm} {
    @each $p in $pnts {
      $i: index($pnts, $p);
      #{$p} { -moz-transform: nth($tfrms, $i); }
    }
    @content;
  }
  @-o-keyframes #{$nm} {
    @each $p in $pnts {
      $i: index($pnts, $p);
      #{$p} { -o-transform: nth($tfrms, $i); }
    }
    @content;
  }
  @-ms-keyframes #{$nm} {
    @each $p in $pnts {
      $i: index($pnts, $p);
      #{$p} { -ms-transform: nth($tfrms, $i); }
    }
    @content;
  }
  @keyframes #{$nm} {
    @each $p in $pnts {
      $i: index($pnts, $p);
      #{$p} { transform: nth($tfrms, $i); }
    }
    @content;
  }
}

@mixin keyframes($nm) {
	@-webkit-keyframes #{$nm} {
		@content;
	}
	@-moz-keyframes #{$nm} {
		@content;
	}
	@-o-keyframes #{$nm} {
		@content;
	}
	@-ms-keyframes #{$nm} {
		@content;
	}
	@keyframes #{$nm} {
		@content;
	}
}

@mixin animation($animation, $animation-2: null, $animation-3: null) {
	-webkit-animation: $animation, $animation-2, $animation-3; // Safari 4+ 
	-moz-animation:    $animation, $animation-2, $animation-3; // Fx 5+ 
	-o-animation:      $animation, $animation-2, $animation-3; // Opera 12+ 
	animation:         $animation, $animation-2, $animation-3; // IE 10+, Fx 29+ 
}


// Generating :before or :after pseudo-element shapes

@mixin p-el(
	$el,
	$el-w: null,
	$el-h: null) {
	@if $el == "before" or $el == "after" { 
		&::#{$el} {
			display: block;
			content: ''; 
			position: absolute;
			width: $el-w;
			height: $el-h;
			@content;
		}
	} 
	@else {
    	@error "`#{$el}` is not a valid pseudo-element.";
	}
}


// 	ELEMENTS

@mixin standard-btn($width, $height, $background: none, $height-nw: null, $width-nw: null) {
	border: none;
	outline: none;
	background: $background;
	height: $height;
	width: $width;
	@include mq(medium) {
		height: $height-nw;
		width: $width-nw;
	}
}
